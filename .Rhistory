blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(rvest)
library(janitor)
library(lubridate)
library(ggimage)
library(hrbrthemes)
#The Wikipage we'll need
wiki_url <- "https://en.wikipedia.org/wiki/Marathon_world_record_progression"
runners_wiki <- wiki_url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
?theme_ipsum_rc
runners_wiki_alternative <- wiki_url %>%
read_html() %>%
html_table(fill = TRUE) %>%
.[[1]]
head(runners_wiki, n = 3)
runners_clean <- runners_wiki %>%
clean_names() %>%
select(1,2,4)
str(runners_clean)
runners_mutate <- runners_clean %>%
add_row(time = "1:59:40", name = "Eliud Kipchoge", date = "November 12, 2019") %>%
mutate(run_period_raw = hms(time),
run_duration = as.numeric(run_period_raw, "minutes"),
run_year = year(mdy(date))) %>%
select(c(-date,-time))
runners_mutate[5,4] <- 1909
runners_mutate %>%
pull(run_year)
year_sub <- c(1908, 1920, 1929, 1947, seq(1960,1980,10), 1999, 2011, 2019)
runners_mutate <- runners_mutate %>%
filter(run_year %in% year_sub)
runners_mutate <- runners_mutate %>%
mutate(run_image = "run.png")
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc()
g
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
hrbrthemes.loadfonts = TRUE
)
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
plot_title_size = 14,
subtitle_size = 10
)
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g1 <-  g +
scale_x_continuous(name = "Year",
limits = c(1900,2025),
breaks = seq(1900,2020,10),
labels = c("1900", paste0("'", seq(10,90,10)),"2000",
"'10","'19"))
g2 <-
g1 + scale_y_time(name = "Time (hours)",
limits = c(100,180),
breaks = seq(100,180,10),
labels = c("1:40","1:50", "2:00", "2:10","2:20","2:30","2:40", "2:50", "3:00"))
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
plot.subtitle = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
plot_title_size = 10,
subtitle_size = 7
)
g
g1 <-  g +
scale_x_continuous(name = "Year",
limits = c(1900,2025),
breaks = seq(1900,2020,10),
labels = c("1900", paste0("'", seq(10,90,10)),"2000",
"'10","'19"))
g2 <-
g1 + scale_y_time(name = "Time (hours)",
limits = c(100,180),
breaks = seq(100,180,10),
labels = c("1:40","1:50", "2:00", "2:10","2:20","2:30","2:40", "2:50", "3:00"))
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
plot.subtitle = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
import_roboto_condensed()
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
?import_roboto_condensed()
import_roboto_condensed()
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
plot_title_size = 12,
subtitle_size = 9
)
g1 <-  g +
scale_x_continuous(name = "Year",
limits = c(1900,2025),
breaks = seq(1900,2020,10),
labels = c("1900", paste0("'", seq(10,90,10)),"2000",
"'10","'19"))
g2 <-
g1 + scale_y_time(name = "Time (hours)",
limits = c(100,180),
breaks = seq(100,180,10),
labels = c("1:40","1:50", "2:00", "2:10","2:20","2:30","2:40", "2:50", "3:00"))
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
library(hrbrthemes)
library(tidyverse)
library(tidyverse)
library(rtweet)
library(lubridate)
library(hrbrthemes)
tmls <- get_timelines(c("netanyahu", "gantzbe"), n = 5000)
df <- tmls %>%
mutate(t_year = year(created_at),
t_week = week(created_at)) %>%
group_by(screen_name, t_year, t_week) %>%
summarise(n = n()) %>%
ungroup() %>%
filter(t_year >= 2019 & t_year < 2020) %>%
mutate(t_week_date = as.Date(paste(2019, t_week, 1, sep = "-"),"%Y-%U-%u")) #thanks to a stack overflow for this response
ggplot(data = df) +
geom_path(aes(x = t_week_date, y = n, color = screen_name), size = 1)+
scale_x_date(date_breaks = "1 month", date_labels = "%b")+
labs(title = "Israeli political candidates weekly tweets throughout 2019", x = NULL, y = NULL)+
theme_ipsum_rc()+
geom_text(data = df %>% filter(t_week_date %in% as.Date(c("2019-04-08", "2019-09-16")) & screen_name == "netanyahu"),
aes(x = t_week_date, y = 100, label = c("First elections\nApr 9, 2019", "Second Elections\n Sep 17, 2019")), hjust = -0.1)+
geom_vline(xintercept = as.Date(c("2019-04-08", "2019-09-16")), linetype = "dashed", size = 1, alpha = 7/10)+
scale_color_discrete(name = "Candidate", breaks = c("netanyahu", "gantzbe"), labels = c("Benjamin Netanyahu (previous PM)","Benny Gantz"))+
theme(
legend.background = element_blank(),
legend.key.size = unit(1.5, "line"),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = "top",
panel.grid = element_blank()
)
ggsave("elections.png", width = 10, height = 6)
save(tmls, df, file = "mydata.RData")
load("mydata.RData")
tmls <- get_timelines(c("netanyahu", "gantzbe"), n = 5000)
df <- tmls %>%
mutate(t_year = year(created_at),
t_week = week(created_at)) %>%
group_by(screen_name, t_year, t_week) %>%
summarise(n = n()) %>%
ungroup() %>%
filter(t_year >= 2019 & t_year < 2020) %>%
mutate(t_week_date = as.Date(paste(2019, t_week, 1, sep = "-"),"%Y-%U-%u")) #thanks to a stack overflow for this response
library(tidyverse)
library(rtweet)
library(lubridate)
library(hrbrthemes)
tmls <- get_timelines(c("netanyahu", "gantzbe"), n = 5000)
df <- tmls %>%
mutate(t_year = year(created_at),
t_week = week(created_at)) %>%
group_by(screen_name, t_year, t_week) %>%
summarise(n = n()) %>%
ungroup() %>%
filter(t_year >= 2019 & t_year < 2020) %>%
mutate(t_week_date = as.Date(paste(2019, t_week, 1, sep = "-"),"%Y-%U-%u")) #thanks to a stack overflow for this response
ggplot(data = df) +
geom_path(aes(x = t_week_date, y = n, color = screen_name), size = 1)+
scale_x_date(date_breaks = "1 month", date_labels = "%b")+
labs(title = "Israeli political candidates weekly tweets throughout 2019", x = NULL, y = NULL)+
theme_ipsum_rc()+
geom_text(data = df %>% filter(t_week_date %in% as.Date(c("2019-04-08", "2019-09-16")) & screen_name == "netanyahu"),
aes(x = t_week_date, y = 100, label = c("First elections\nApr 9, 2019", "Second Elections\n Sep 17, 2019")), hjust = -0.1)+
geom_vline(xintercept = as.Date(c("2019-04-08", "2019-09-16")), linetype = "dashed", size = 1, alpha = 7/10)+
scale_color_discrete(name = "Candidate", breaks = c("netanyahu", "gantzbe"), labels = c("Benjamin Netanyahu (previous PM)","Benny Gantz"))+
theme(
legend.background = element_blank(),
legend.key.size = unit(1.5, "line"),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = "top",
panel.grid = element_blank()
)
hrbrthemes.loadfonts()
hrbrthemes.loadfonts
extrafont::loadfonts()
hrbrthemes.loadfonts()
font_import()
library(extrafont)
font_import()
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
fonts()
hrbrthemes.loadfonts()
import_roboto_condensed()
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
plot_title_size = 12,
subtitle_size = 9
)
g1 <-  g +
scale_x_continuous(name = "Year",
limits = c(1900,2025),
breaks = seq(1900,2020,10),
labels = c("1900", paste0("'", seq(10,90,10)),"2000",
"'10","'19"))
g2 <-
g1 + scale_y_time(name = "Time (hours)",
limits = c(100,180),
breaks = seq(100,180,10),
labels = c("1:40","1:50", "2:00", "2:10","2:20","2:30","2:40", "2:50", "3:00"))
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
?import_roboto_condensed
import_roboto_condensed(hrbrthemes.loadfonts = TRUE)
import_roboto_condensed(hrbrthemes.loadfonts = TRUE)
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g3
ggsave(g3, "g3.png")
ggsave("g3.png")
blogdown:::serve_site()
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
plot_title_size = 14,
subtitle_size = 10,
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed")
)
g <- ggplot(runners_mutate, aes(x = run_year, y = run_duration))+
geom_image(aes(image = run_image), size = 0.05)+
theme_ipsum_rc(
)
g1 <-  g +
scale_x_continuous(name = "Year",
limits = c(1900,2025),
breaks = seq(1900,2020,10),
labels = c("1900", paste0("'", seq(10,90,10)),"2000",
"'10","'19"))
g2 <-
g1 + scale_y_time(name = "Time (hours)",
limits = c(100,180),
breaks = seq(100,180,10),
labels = c("1:40","1:50", "2:00", "2:10","2:20","2:30","2:40", "2:50", "3:00"))
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed"),
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 24)
)
g3
g3 <- g2 +
labs(title = "How does Eliud Kipchoge marathon score compare to previous yearly records?",
subtitle = "Points are world records for every 10-15 years. \nEliud Kipchoge is the first to break the two-hour barrier (unofficially), Great job!")+
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "gray75", size = 0.1, linetype = "dashed"),
plot.title = element_text(size = 14),
plot.subtitle = element_text(size = 10)
)
g4 <- g3 +
geom_curve(aes(x = 2018, y = 120, xend = 2014, yend = 115),
colour = "black", size = 0.9, curvature = 0.5,
arrow = arrow(length = unit(2,"mm"), type = "closed"))+
annotate("text", x=2010, y= 109,
label = "Eliud Kipchoge\n12.10.2019\n1:59:40",
color = "black", size = 3, hjust = 0)
g4
g4 <- g3 +
geom_curve(aes(x = 2018, y = 120, xend = 2015, yend = 113),
colour = "black", size = 0.9, curvature = 0.5,
arrow = arrow(length = unit(2,"mm"), type = "closed"))+
annotate("text", x=2010, y= 109,
label = "Eliud Kipchoge\n12.10.2019\n1:59:40",
color = "black", size = 3, hjust = 0)
g4
g4 <- g3 +
geom_curve(aes(x = 2018, y = 120, xend = 2015, yend = 113),
colour = "black", size = 0.9, curvature = 0.5,
arrow = arrow(length = unit(2,"mm"), type = "closed"))+
annotate("text", x=2010, y= 107,
label = "Eliud Kipchoge\n12.10.2019\n1:59:40",
color = "black", size = 3, hjust = 0)
g4
g4 <- g3 +
geom_curve(aes(x = 2018, y = 120, xend = 2015, yend = 113),
colour = "black", size = 0.9, curvature = 0.5,
arrow = arrow(length = unit(2,"mm"), type = "closed"))+
annotate("text", x=2010, y= 105,
label = "Eliud Kipchoge\n12.10.2019\n1:59:40",
color = "black", size = 3, hjust = 0)
g4
blogdown:::serve_site()
blogdown:::serve_site()
render_toc <- function(
filename,
toc_header_name = "Table of Contents",
base_level = NULL,
toc_depth = 3
) {
x <- readLines(filename, warn = FALSE)
x <- paste(x, collapse = "\n")
x <- paste0("\n", x, "\n")
for (i in 5:3) {
regex_code_fence <- paste0("\n[`]{", i, "}.+?[`]{", i, "}\n")
x <- gsub(regex_code_fence, "", x)
}
x <- strsplit(x, "\n")[[1]]
x <- x[grepl("^#+", x)]
if (!is.null(toc_header_name))
x <- x[!grepl(paste0("^#+ ", toc_header_name), x)]
if (is.null(base_level))
base_level <- min(sapply(gsub("(#+).+", "\\1", x), nchar))
start_at_base_level <- FALSE
x <- sapply(x, function(h) {
level <- nchar(gsub("(#+).+", "\\1", h)) - base_level
if (level < 0) {
stop("Cannot have negative header levels. Problematic header \"", h, '" ',
"was considered level ", level, ". Please adjust `base_level`.")
}
if (level > toc_depth - 1) return("")
if (!start_at_base_level && level == 0) start_at_base_level <<- TRUE
if (!start_at_base_level) return("")
if (grepl("\\{#.+\\}(\\s+)?$", h)) {
# has special header slug
header_text <- gsub("#+ (.+)\\s+?\\{.+$", "\\1", h)
header_slug <- gsub(".+\\{\\s?#([-_.a-zA-Z]+).+", "\\1", h)
} else {
header_text <- gsub("#+\\s+?", "", h)
header_text <- gsub("\\s+?\\{.+\\}\\s*$", "", header_text) # strip { .tabset ... }
header_text <- gsub("^[^[:alpha:]]*\\s*", "", header_text) # remove up to first alpha char
header_slug <- paste(strsplit(header_text, " ")[[1]], collapse="-")
header_slug <- tolower(header_slug)
}
paste0(strrep(" ", level * 4), "- [", header_text, "](#", header_slug, ")")
})
x <- x[x != ""]
knitr::asis_output(paste(x, collapse = "\n"))
}
save(render_toc.rda)
save(render_toc, "render_toc.rda")
save(render_toc, "render_toc.rda")
?save
save(render_toc, "render_toc.Rda")
save(render_toc)
save(render_toc, file = "render_toc.rda")
getwd()
load(render_toc.rda)
load("render_toc.rda")
?source
load("render_toc.rda")
blogdown:::serve_site()
blogdown:::serve_site()
?source
str(runners_mutate)
blogdown:::serve_site()
?geom_image
blogdown:::serve_site()
blogdown:::serve_site()
This option extracts all table from the html page using `html_table()`. Using this on the whole page parses the html tables into data frames nesting within a list object. `{rvest}` makes it easy for us and if the tables have inconsistent number of values it requires (or demands?) us to fill them. Once we have the tables in a list object we can extract the one we need using `.[[1]]`. The `.` acts as a place holder for the previous object passed, in this case the list of tables we created. the `[[1]]` following that calls for the first object within the list, but with its core class, in this case a `class(runners_wiki_alternative)`. If we'd use one square bracket `[1]` we'd end up with a list object, which is not good for us here.
Sys.getlocale(category="LC_CTYPE")
Sys.getlocale(category="LC_CTYPE")
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
Sys.getlocale(category="LC_CTYPE")
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
Sys.getlocale(category="LC_CTYPE")
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
deafults write org.R-project.R force.LANG en_US.UT-8
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
Sys.setlocale(category = "LC_CTYPE", "en_US.UTF-8")
readRenviron("/etc/default/locale")
getwd()
cd
Sys.setlocale("LC_ALL", 'en_US.UTF.8')
Sys.setlocale("LC_ALL", 'en_US.UTF.8')
Sys.setlocale("LC_CTYPE", 'en_US.UTF.8')
Sys.setlocale("LC_CTYPE", 'en_US.UTF.8')
?Sys.setlocale
Sys.setlocale("LC_CTYPE", 'en_US.UTF8')
Sys.setlocale("LC_CTYPE", "en_US.UTF8")
Sys.getlocale()
Sys.getenv
Sys.getenv()
R.home
R.home()
file.edit("~/.Renviron")
usethis::edit_r_environ().
usethis::edit_r_environ()
usethis::edit_r_environ()
file.edit("~/.Renviron")
getwd()
R.home()
R.home()
file.edit("~/.Renviron")
usethis::edit_r_environ()
install.packages("keyring")
key_set()
library(keyring)
key_set()
key_set("ggmap_token")
key_set("ggmap_api_key")
key_get(ggmap_api_key)
key_get("ggmap_api_key")
keyring_list()
get_key("ggmap_api_key")
keyring::get_key("ggmap_api_key")
keyring::key_get("ggmap_api_key")
