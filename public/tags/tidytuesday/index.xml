<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TidyTuesday | Amit Levinson</title>
    <link>https://amitlevinson.com/tags/tidytuesday/</link>
      <atom:link href="https://amitlevinson.com/tags/tidytuesday/index.xml" rel="self" type="application/rss+xml" />
    <description>TidyTuesday</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Amit Levinson 2021</copyright><lastBuildDate>Sun, 03 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://amitlevinson.com/images/icon_hudc5a425b3e555d4faa8838526864126b_16079_512x512_fill_lanczos_center_2.png</url>
      <title>TidyTuesday</title>
      <link>https://amitlevinson.com/tags/tidytuesday/</link>
    </image>
    
    <item>
      <title>Automatic Rendering of a Plot with GitHub Actions</title>
      <link>https://amitlevinson.com/blog/automated-plot-with-github-actions/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://amitlevinson.com/blog/automated-plot-with-github-actions/</guid>
      <description>


&lt;style type=&#34;text/css&#34;&gt;
newcaption {
  font-size: 0.9em;
  text-align: center;
}
&lt;/style&gt;
&lt;img src=&#34;outcome.png&#34; /&gt;
&lt;center&gt;
&lt;newcaption&gt;Final outcome of a plot in my GitHub README automatically updating and rendering on a specific git commit.&lt;/newcaption&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: In this post we setup the code for having a GitHub Action automatically update a plot. I start by showing step by step how I plot my most frequently used R packages for &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;#Tidytuesday&lt;/a&gt;, a weekly data visualization project for the R community. However, I constantly add more information to that data every time I participate and will have to re-run the script to update the plot. For that purpose we turn to GitHub Actions and provide a workflow to run the R script on a specific Git commit. You can find a live example of the outcome in my &lt;a href=&#34;https://github.com/AmitLevinson/TidyTuesday&#34;&gt;#TidyTuesday repository&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;preface&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Preface&lt;/h3&gt;
&lt;p&gt;Before we begin, I want to thank &lt;a href=&#34;https://ramikrispin.github.io/&#34;&gt;Rami Krispin&lt;/a&gt; and &lt;a href=&#34;https://geobgu.xyz/&#34;&gt;Michael Dorman&lt;/a&gt;. I contacted Rami a while back asking for advice on working with GitHub Actions. Rami helped me solve several problems I had and saved me a lot of frustration.&lt;/p&gt;
&lt;p&gt;As to Michael, I thank him for the example I use in this blog post. A while back Michael posted in an Israeli R Facebook group a plot detailing &lt;a href=&#34;https://gist.github.com/michaeldorman/ad8d89136f03769105ccc6199a913f0b?fbclid=IwAR09u1WFD9YpKYb7nvezOKqGGZac3AuVWC7ogDItSv9sXXS0x2KpYxg3aU0&#34;&gt;the packages he frequently used at that time&lt;/a&gt;. I found it a great starting point to learn more about automation by trying out GitHub Actions to update a plot with my frequently used packages in #TidyTuesday submissions.&lt;/p&gt;
&lt;p&gt;Speaking of automation, let’s dive in!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/XCxcmEQWxDdc8qsd2R/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-automate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why automate?&lt;/h3&gt;
&lt;p&gt;To answer that let’s start with understanding what GitHub Actions are. Taken from GitHub’s website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you’d like, including CI/CD, and combine actions in a completely customized workflow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reading up on various things you can automate made me eager to try it out - &lt;strong&gt;For example, automating a script to run every Sunday morning, sending an email, updating a dashboard hosted online, collecting data and more.&lt;/strong&gt; One example that I saw while working on this post was &lt;a href=&#34;https://www.hvitfeldt.me/&#34;&gt;Emil Hvitfeldt’s&lt;/a&gt; awesome paletter &lt;a href=&#34;https://twitter.com/BotPaletteer&#34;&gt;bot&lt;/a&gt;. A Twitter bot that automatically tweets color palette packages once a day.&lt;/p&gt;
&lt;center&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hello Twitter! It is Saturday and I have a gorgeous color palette for you!&lt;br&gt;&lt;br&gt;🔥The spinifex palette from the {colRoz} package🔥&lt;br&gt;&lt;br&gt;colRoz is available on Github:&lt;a href=&#34;https://t.co/qChZrvdXY0&#34;&gt;https://t.co/qChZrvdXY0&lt;/a&gt; &lt;a href=&#34;https://t.co/nAiKTy0dH1&#34;&gt;pic.twitter.com/nAiKTy0dH1&lt;/a&gt;&lt;/p&gt;&amp;mdash; paletteerBot (@BotPaletteer) &lt;a href=&#34;https://twitter.com/BotPaletteer/status/1340376626853535745?ref_src=twsrc%5Etfw&#34;&gt;December 19, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;newcaption&gt;&lt;a href=&#34;https://www.hvitfeldt.me/&#34;&gt;Emil Hvitfeldt’s&lt;/a&gt; Twitter bot tweeting color palettes once a day using GitHub Actions&lt;/newcaption&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div id=&#34;my-tidytuesday-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;My TidyTuesday packages&lt;/h2&gt;
&lt;p&gt;In this post I’ll go through creating the infrastructure to automatically update a plot I present in my TidyTuesday GitHub README file. In short, &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;#Tidytuesday&lt;/a&gt; is an awesome weekly data project where individuals analyze and visualize new data every week. I find it a terrific learning experience and try to participate when I can.&lt;/p&gt;
&lt;p&gt;Every TidyTuesday I open a new R session resulting in the creation of multiple R files, and more relevant to us, the packages we use each session. In the following section we’ll read in the R scripts from all my Tidytuesday participations and see what plots do I frequently use. Following that we’ll turn to GitHub Actions to configure a &lt;em&gt;workflow&lt;/em&gt; that automatically updates our created plot when we add new data.&lt;/p&gt;
&lt;p&gt;Side note: if you just want to quickly visualize your #TidyTuesday code without any GitHub Actions, I highly recommend exploring &lt;a href=&#34;https://karaman.is/&#34;&gt;Georgis Karmanis&lt;/a&gt; &lt;a href=&#34;https://twitter.com/geokaramanis/status/1334437358519902209&#34;&gt;Tweet&lt;/a&gt; and code. There he used the &lt;code&gt;{textreadr}&lt;/code&gt; package to do a lot of the heavy lifting reading in and cleaning the files we’ll do below.&lt;/p&gt;
&lt;div id=&#34;reading-the-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading the files&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/michaeldorman/ad8d89136f03769105ccc6199a913f0b?fbclid=IwAR09u1WFD9YpKYb7nvezOKqGGZac3AuVWC7ogDItSv9sXXS0x2KpYxg3aU0&#34;&gt;Michael’s original script&lt;/a&gt; is fantastic, but what’s a blog post without challenges and tears. Therefore I decided to re-write his R-code using purrr and other friends. Let’s start by loading the packages and reading in the files:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For map iterations
library(purrr)
# Cleaning text
library(stringr)
# Data manipulation
library(dplyr)
# For plotting
library(ggplot2)
# Adding a font for the plot
library(extrafont)

# Ideally, use the here package and not complete paths
tt_path &amp;lt;- &amp;quot;C:/Users/amitl/R_code/tidytuesday&amp;quot;
files &amp;lt;- list.files(path = &amp;quot;C:/Users/amitl/R_code/tidytuesday&amp;quot;, pattern = &amp;quot;\\.R$|.Rmd$&amp;quot;, recursive = TRUE)
files &amp;lt;- files[!str_detect(files, &amp;quot;packages-plot.R&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First and most important, I recommend using R projects and the &lt;a href=&#34;https://github.com/jennybc/here_here&#34;&gt;{here}&lt;/a&gt; package by &lt;a href=&#34;https://jennybryan.org/&#34;&gt;Jennifer Bryan&lt;/a&gt; for file management. The only reason I’m using a direct path is because when writing this post my R session assumes I’m within my website directory, making it a challenge to move between project roots&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We started by listing all files ending in &lt;code&gt;.R&lt;/code&gt; or &lt;code&gt;.Rmd&lt;/code&gt; in that specific path, also searching through sub-folder using &lt;code&gt;recursive = TRUE&lt;/code&gt;. I then filter the script I use to produce the plot, since I don’t want to include it in the analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(files)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2019/1_Week38_Number of Visitors/National Parks.R&amp;quot;       
## [2] &amp;quot;2019/2_Week39_SchoolDiversity/School_Diversity.R&amp;quot;        
## [3] &amp;quot;2019/2_Week39_SchoolDiversity/School_Diversity_Updated.R&amp;quot;
## [4] &amp;quot;2019/Week40_All the Pizza/Barstool_Top_2_Percent.R&amp;quot;      
## [5] &amp;quot;2019/Week40_All the Pizza/BarstoolPizza.R&amp;quot;               
## [6] &amp;quot;2019/Week41_Power_lifting/ipf.R&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the R scripts I used to produce my TidyTuesdays. Unfortunately, it also returns R scripts I opened but didn’t completely follow through with the analysis. That is, sometimes I worked on a TidyTuesday but stopped and left it incomplete without producing a plot (shame on me). There’s not that many of them and for the purpose of the post we’ll leave them there.&lt;/p&gt;
&lt;p&gt;Before we dig in I want to get the names of the files. It’s not required for the analysis, but I found in nicer to look at the packages used corresponding to where they came from.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get names
file_names &amp;lt;- str_extract(files, &amp;#39;[^/]+(?=\\.)&amp;#39;)

head(file_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;National Parks&amp;quot;           &amp;quot;School_Diversity&amp;quot;        
## [3] &amp;quot;School_Diversity_Updated&amp;quot; &amp;quot;Barstool_Top_2_Percent&amp;quot;  
## [5] &amp;quot;BarstoolPizza&amp;quot;            &amp;quot;ipf&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our original string was “2019/1_Week38_Number of Visitors/National Parks.R”, and we wanted everything after the last &lt;code&gt;/&lt;/code&gt; but before the period - “National Parks”. We achieve this using the regular expression &lt;code&gt;[^/]+&lt;/code&gt; and a positive look ahead &lt;code&gt;(?=\\.)&lt;/code&gt;, capturing everything between the last backslash and a period. Voila, our final output of “National Parks”, my first #TidyTuesday R script.&lt;/p&gt;
&lt;p&gt;Next we read in the text from all the R scripts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_path &amp;lt;- paste0(tt_path, &amp;quot;\\/&amp;quot; ,files)
file_lines &amp;lt;- map(tt_path, readLines)

head(file_lines[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;library(tidyverse)&amp;quot;                                                                                                                              
## [2] &amp;quot;library(png)&amp;quot;                                                                                                                                    
## [3] &amp;quot;library(gridGraphics)&amp;quot;                                                                                                                           
## [4] &amp;quot;&amp;quot;                                                                                                                                                
## [5] &amp;quot;park_visits &amp;lt;- readr::read_csv(\&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv\&amp;quot;)&amp;quot;
## [6] &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating a complete path of our scripts we iterated across them using &lt;code&gt;map&lt;/code&gt; and the function &lt;code&gt;readLines&lt;/code&gt;. You can read &lt;code&gt;map&lt;/code&gt; as follows: Run function &lt;code&gt;readLines&lt;/code&gt; on every element of vector &lt;code&gt;tt_path&lt;/code&gt; (The vector containing our path to each &lt;code&gt;.R&lt;/code&gt;/&lt;code&gt;.Rmd&lt;/code&gt; script). For a better understanding of the &lt;code&gt;map&lt;/code&gt; function and family I highly recommend exploring the &lt;a href=&#34;https://purrr.tidyverse.org/reference/map.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cleaning&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cleaning&lt;/h3&gt;
&lt;p&gt;If my memory is correct, I mainly use functions either by loading the library through &lt;code&gt;library()&lt;/code&gt; or reference specific argument with &lt;code&gt;library::&lt;/code&gt;. We’ll capture both options using some regex and return them as a dataframe:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(file_lines) &amp;lt;- file_names
file_packages &amp;lt;- map_dfr(file_lines, ~ tibble(package = str_extract(.x, &amp;quot;((?&amp;lt;=library\\().+(?=\\))|\\w+(?=::))&amp;quot;)),
  .id = &amp;quot;tidytuesday&amp;quot;) %&amp;gt;% 
  filter(!is.na(package)) %&amp;gt;% 
  distinct(tidytuesday, package)

head(file_packages)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   tidytuesday      package     
##   &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;       
## 1 National Parks   tidyverse   
## 2 National Parks   png         
## 3 National Parks   gridGraphics
## 4 National Parks   readr       
## 5 School_Diversity tidyverse   
## 6 School_Diversity stringr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect! First I added the original script names for each sub list within the &lt;code&gt;file_lines&lt;/code&gt;. As to the analysis Let’s tackle each element at a time from the inside out, starting with the regular expressions.&lt;/p&gt;
&lt;p&gt;We can split the regex into two parts. the first one &lt;code&gt;(?&amp;lt;=library\\()).+(?=\\())&lt;/code&gt; is both a positive look behind capturing everything after &lt;code&gt;library\\(&lt;/code&gt; until it reaches &lt;code&gt;(?=\\))&lt;/code&gt;, a positive look ahead for a parentheses. That way we capture everything in between the parentheses but remove the string &lt;code&gt;library()&lt;/code&gt;. The second section of the regex &lt;code&gt;\\w+(?=::))&lt;/code&gt; mimics the previous one but this time only with a positive look ahead – Capture the word (&lt;code&gt;\\w+&lt;/code&gt;) before the two &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We iterate the &lt;code&gt;str_extract&lt;/code&gt; across each sub-list of the &lt;code&gt;file_lines&lt;/code&gt; object using &lt;code&gt;map_dfr&lt;/code&gt; to return a tibble. Since it returns a tibble, a variant of a data frame, we can assign the new vector a column name - &lt;code&gt;package&lt;/code&gt;. In addition, &lt;code&gt;map_df*&lt;/code&gt; (map_df, map_dfr, etc.) can take an &lt;code&gt;.id&lt;/code&gt; argument that will return the names of the original sub-lists as a column, in our case the names of our files we earlier cleaned. After filtering any &lt;code&gt;NA&lt;/code&gt; values such as empty lines, I used &lt;code&gt;distinct&lt;/code&gt; to remove duplicate called packages in each week. For example, if I called &lt;code&gt;stringr::&lt;/code&gt; twice in an R script I only want to count it once per session.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;plot&lt;/h3&gt;
&lt;p&gt;We’re at the last part of reading-processing-plotting journey. The plot is pretty straight forward – we count the frequency of packages, relevel them by a descending order, take the top 15 frequently used and plot it as a bar plot.&lt;/p&gt;
&lt;p&gt;If you decide to try another plot remember that you want it to automatically update, so make sure you create something that won’t require you to constantly return to the code for editing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Uncomment if you use it in a GitHub Action
# library(showtext)
# font_add_google(&amp;quot;Roboto Condensed&amp;quot;, &amp;quot;Roboto&amp;quot;)
# showtext_auto()

file_packages %&amp;gt;% 
  count(package, sort = T) %&amp;gt;%
  mutate(package = factor(package, levels = rev(package))) %&amp;gt;% 
  slice(1:15) %&amp;gt;% 
  ggplot()+
  geom_col(aes(y= package, x = n), fill = &amp;quot;gray45&amp;quot;)+
  labs(title = &amp;quot;Frequently used packages in #Tidytuesday&amp;quot;,
       subtitle = &amp;quot;Plot is rendered on every &amp;#39;initial commit&amp;#39; to this repository, showing my 15 most frequently\nused packages in #TidyTuesday&amp;quot;,
       x = &amp;quot;Number of times used&amp;quot;, y = &amp;quot;Package name&amp;quot;,
       caption = paste0(&amp;quot;Total scripts: &amp;quot;, length(file_names),
                        &amp;quot;\nLast updated:&amp;quot;,format(Sys.Date(), &amp;quot;%b %d, %Y&amp;quot;)))+
  theme_minimal()+
  theme(
    text = element_text(family = &amp;quot;Roboto Condensed&amp;quot;),
    plot.title = element_text(size = 18),
    plot.title.position = &amp;quot;plot&amp;quot;,
    plot.subtitle = element_text(size = 11, color = &amp;quot;gray20&amp;quot;),
    plot.caption = element_text(size = 8, color = &amp;quot;gray30&amp;quot;, face = &amp;quot;italic&amp;quot;),
    axis.title = element_text(color = &amp;quot;gray40&amp;quot;, size = 9),   
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 11),
    panel.grid.major.y = element_blank(),
    plot.margin = unit(c(4,2,2,4), &amp;quot;mm&amp;quot;)
  )

# Save somewhere you&amp;#39;ll reference later
# ggsave (&amp;quot;extra/packages-used.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://amitlevinson.com/blog/automated-plot-with-github-actions/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A few specific things to note:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;In the GitHub Action I use &lt;a href=&#34;https://github.com/yixuan/showtext&#34;&gt;&lt;code&gt;showtext&lt;/code&gt;&lt;/a&gt; as it enables to load a font that’s not currently installed on the computer. You might need to play around with the text size if you use this package, as the appearance of graphs might vary across operating systems. Here I used the&lt;code&gt;{extrafont}&lt;/code&gt; package since for some reason showtext wasn’t properly rendering for me in this blog post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the caption I added two additional pieces of information we can insert to take advantage of the automation. The First part is the number of scripts used to produce the plot (&lt;code&gt;file_names&lt;/code&gt;) when the Action ran. Second, the caption adds the current date on every render, i.e. every time we push to our #TidyTuesday repository and activate the GitHub Action.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An issue that’s left is when calling &lt;code&gt;tidyverse&lt;/code&gt; essentially we load packages such as &lt;code&gt;readr&lt;/code&gt;, &lt;code&gt;ggplot2&lt;/code&gt;, etc. We see that &lt;code&gt;readr&lt;/code&gt; dominates the plot of packages because I call it explicitly when loading the data, compared to ggplot2 that I only load using &lt;code&gt;tidyverse&lt;/code&gt;. So do I want to leave &lt;code&gt;readr&lt;/code&gt; or remove it if I already load it with the &lt;code&gt;tidyverse&lt;/code&gt;? Here I leave it as is, but let me know if you decided to tackle it (One option was parsing all scripts and seeing which package is used, but that can take a good while).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;github-actions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GitHub Actions&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;See additional learning resources below&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/CmFMWpEa4IFtS/giphy.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;GitHub actions provide an easy way to automate various &lt;em&gt;workflows&lt;/em&gt;. We give GitHub a set of instructions on when to run the Action, and what exactly does it need to do. Instructions are aggregated as a script, in our case a ‘YAML’ file with specific commands&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have our plot showcasing our most frequently used packages, but we want it rendered for us on every participation in #TidyTuesday. That’s exactly where GitHub Actions can help us by running the script for us. &lt;strong&gt;We setup the code once, like we did before, and have our workflow run it when we choose.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;action-setup&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Action Setup&lt;/h3&gt;
&lt;p&gt;If you’re not an R user, or don’t want to use the &lt;code&gt;usethis&lt;/code&gt; R package to create the Action workflow (our set of instructions), you can setup an action manually. Just click on the Action tab in your repository &lt;i class=&#34;fas fa-arrow-right&#34;&gt;&lt;/i&gt; ‘new workflow’ and setup a workflow template yourself.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;{usethis}&lt;/code&gt; package makes it easy to work with GitHub Actions by providing great &lt;code&gt;yaml&lt;/code&gt; templates and folder setups for various occasions. I found the &lt;code&gt;README&lt;/code&gt; template adequate so we’ll create that. Assuming you have the package installed, just type the following in the r console in the root folder of your Tidytuesday repository (or whatever repository you want the Action to run on):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::use_github_action()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you should receive the following output, only with your information instead:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;√ Setting active project to &amp;#39;C:/Users/amitl/R_code/TidyTuesday&amp;#39;
√ Creating &amp;#39;.github/&amp;#39;
√ Adding &amp;#39;^\\.github$&amp;#39; to &amp;#39;.Rbuildignore&amp;#39;
√ Adding &amp;#39;*.html&amp;#39; to &amp;#39;.github/.gitignore&amp;#39;
√ Creating &amp;#39;.github/workflows/&amp;#39;
√ Writing &amp;#39;.github/workflows/R-CMD-check.yaml&amp;#39;
* Copy and paste the following lines into &amp;#39;C:/Users/amitl/R_code/TidyTuesday/README.md&amp;#39;:
  &amp;lt;!-- badges: start --&amp;gt;
  [![R build status](https://github.com/AmitLevinson/TidyTuesday/workflows/R-CMD-check/badge.svg)](https://github.com/AmitLevinson/TidyTuesday/actions)
  &amp;lt;!-- badges: end --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfect. We’re not going to copy the lines suggested as they’re helpful for package checks, and we’re only interested in producing a plot. The important outcome for us from running the line is the newly produced output under &lt;code&gt;./github/workflows/R-CMD-check.yaml&lt;/code&gt;. We’re going to use that yaml file to write up what we want GitHub to do.&lt;/p&gt;
&lt;p&gt;Feel free to rename the &lt;em&gt;worflow&lt;/em&gt; file; as long as it’s a &lt;code&gt;yaml&lt;/code&gt; file under &lt;code&gt;/.github/workflows&lt;/code&gt; GitHub will process it as an Action automatically. No further setup is needed, unless you need to use &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/security-hardening-for-github-actions#using-secrets&#34;&gt;‘secretes’&lt;/a&gt;, e.g. for confidential API keys.&lt;/p&gt;
&lt;p&gt;Below are the instructions we implement in our yaml file:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;name: Render library update

on: [push]

jobs:
  build:
    runs-on: macOS-latest
    if: &amp;quot;contains(github.event.head_commit.message, &amp;#39;initial commit&amp;#39;)&amp;quot;
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
      - name: Install packages
        run:
          Rscript -e &amp;quot;install.packages(c(&amp;#39;tidyverse&amp;#39;, &amp;#39;showtext&amp;#39;))&amp;quot;
      - name: Render r plot file
        run:
          Rscript -e &amp;quot;source(&amp;#39;extra/packages-plot.R&amp;#39;)&amp;quot;
      - name: Commit results
        run: |
          git config --local user.email &amp;quot;actions@github.com&amp;quot;
          git config --local user.name &amp;quot;GitHub Actions&amp;quot;
          git add extra/packages-used.png
          git commit -m &amp;#39;Re-build package plot&amp;#39; || echo &amp;quot;No changes to commit&amp;quot;
          git push origin || echo &amp;quot;No changes to commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-all-this-yaml&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What’s all this yaml&lt;/h3&gt;
&lt;p&gt;Let’s break up the script piece by piece:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;name: Render library update&lt;/code&gt; - The name of the the GitHub Action. This is what will appear under the workflows section in the GitHub actions tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;on: [push]&lt;/code&gt; - Tells GitHub when to activate the workflow. There’s a plethora of options to use here; for example, you can have it run on every commit, a pull request or both. In addition, you can have it run at a specific time frame using &lt;code&gt;schedule&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs: build:&lt;/code&gt; - I’m not sure what exactly they do. I know that for rendering README files you’d have &lt;code&gt;render&lt;/code&gt; instead of build, but honestly I don’t know what either does exactly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;runs-on: macOS-latest&lt;/code&gt; This tells GitHub on which operating system to run the r environment. You can also choose to run the action on several OS such as Ubuntu and Windows. It can be extremely useful when you’re checking out packages and want to verify they work on various operating systems. I use on my own computer Windows and left it with &lt;code&gt;macOS-latest&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;if: &#34;contains(github.event.head_commit.message, &#39;initial commit&#39;)&#34;&lt;/code&gt; - Here we provide GitHub an ‘exit’ option when running the Action, and the condition on when to run it. &lt;code&gt;github.event.head_commit.message&lt;/code&gt; captures the commit message you used before pushing using a regex we provide - ‘initial commit’. Without a logical condition the Action will follow through on every push; however, we usually want it to run only when adding new scripts and not when modifying existing ones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    We use a conditional statement to tell GitHub when to run our Action. If the condition returns true, in this case matching our commit message, GitHub Actions will complete the workflow. Otherwise the Action will stop and exit before processing the following steps.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;steps...&lt;/code&gt; - Telling GitHub the exact steps we want the action to do. The script starts with &lt;code&gt;uses&lt;/code&gt; and then transitions between &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt;.&lt;br /&gt;
&lt;code&gt;uses&lt;/code&gt; tells GitHub what to use: In the first one, &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;&lt;code&gt;actions/checkout@v2&lt;/code&gt;&lt;/a&gt;, GitHub checks out our repository on which the workflow will run. Next we set up a &lt;a href=&#34;https://github.com/jimhester/setup-r&#34;&gt;remote r environment&lt;/a&gt; using the &lt;code&gt;r-lib/actions/setup-r@v1&lt;/code&gt; argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the following steps we provide a name for the step and the actual code. In the first step we install the packages we’ll be using and in the next one we &lt;code&gt;source&lt;/code&gt; the R code that produces our plot&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, located in my ‘extra’ folder in the repository. Lastly we provide Git commands in which we config the built-in token (to run the git commands), add our rendered plot, commit and push the results.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it! Just upload the newly edited files, and activate the Action with the specific commit. &lt;strong&gt;Don’t forget to reference the plot from your repository’s README so it shows up.&lt;/strong&gt; If you’re not sure how you can see how I did it &lt;a href=&#34;https://raw.githubusercontent.com/AmitLevinson/TidyTuesday/master/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-11&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;success.png&#34; alt=&#34;The different steps the Action does when activated&#34; width=&#34;960&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: The different steps the Action does when activated
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When the Action is running you will see an orange dot at the top of the root folder of your repository. Once it’s complete it should turn green if all went well, or red if not. After it finishes give it a few minutes as it might take some time until the plot is actually updated. You can explore this action in &lt;a href=&#34;https://github.com/AmitLevinson/TidyTuesday&#34;&gt;my #Tidytuesday repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    If the above GitHub Action follows through with the workflow and produces a new plot, it will only be updated in your remote repository. You might be required to merge the remote content locally next time you want to push.
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In order to debug, i.e. if the orange dot turned to a red x, go into the ‘Actions’ tab in your repository, click on ‘Render library update’ or however you called the action &lt;i class=&#34;fas fa-arrow-right&#34;&gt;&lt;/i&gt; click on the last commit message &lt;i class=&#34;fas fa-arrow-right&#34;&gt;&lt;/i&gt; ‘build’ and then you should see a list of actions GitHub took. Try to identify where it stopped by locating the red x it marked the break with. Unfortunately debugging is a post in and of itself, and I’m currently not the one to write it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disabling:&lt;/strong&gt; If you wish to disable the GitHub Action, you can either remove the &lt;code&gt;.yaml&lt;/code&gt; file or disable the action from the repository’s settings.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-12&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;outcome.png&#34; alt=&#34;Final outcome of a plot automatically updating in our README file.&#34; width=&#34;509&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Final outcome of a plot automatically updating in our README file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;closing-remarks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Closing remarks&lt;/h3&gt;
&lt;p&gt;This was my first time using GitHub actions and hopefully not the last. I used here only one example, and might be a little niche for some people, but I hope you got the big picture – GitHub Actions are easy to use, and they can automate a lot of your work. Do let me know if you made an Action as a result of reading the post, I would love to see what you came up with.&lt;/p&gt;
&lt;p&gt;You can find the above example live in &lt;a href=&#34;https://github.com/AmitLevinson/TidyTuesday&#34;&gt;my #TidyTuesday repository&lt;/a&gt;, the complete R script I used &lt;a href=&#34;https://github.com/AmitLevinson/TidyTuesday/blob/master/extra/packages-plot.R&#34;&gt;here&lt;/a&gt;, and the YAML script for the GitHub Action &lt;a href=&#34;https://github.com/AmitLevinson/TidyTuesday/blob/master/.github/workflows/render-plot.yaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, I would like to highlight several resources I found extremely useful for learning more about GitHub Actions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Jim Hester’s &lt;a href=&#34;https://www.jimhester.com/talk/2020-rsc-github-actions/&#34;&gt;rstudio talk&lt;/a&gt; on GitHub actions - Great introduction and to get you excited about the opportunities available with GitHub Actions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gavin Simpson’s blog post &lt;a href=&#34;https://fromthebottomoftheheap.net/2020/04/30/rendering-your-readme-with-github-actions/&#34;&gt;‘Rendering your README with GitHub Actions’&lt;/a&gt; - A more hands-on approach on setting everything up, learning about the &lt;code&gt;yaml&lt;/code&gt; commands and implementing it in a README file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As I was finalizing this blog post I noticed Simon Couch published a fantastic blog post on using &lt;a href=&#34;https://blog.simonpcouch.com/blog/r-github-actions-commit/&#34;&gt;GitHub actions to run an R script on a schedule&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it for now. Hope you enjoyed this blog post and found it useful!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;If you decide to automate this with GitHub Actions, be alert if file paths throw an error.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;For the purpose of this post, and if you don’t use GitHub Actions frequently, you should be good with the free plan (default unless you subscribed). In any case, you can read more about the plans &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions&#34;&gt;here&lt;/a&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;The more dependencies you have, the more susceptible your code is to breaking, e.g. if a function was deprecated. If you’re concerned you can use less dependencies than I have or try &lt;a href=&#34;https://colinfay.me/docker-r-reproducibility/&#34;&gt;Docker&lt;/a&gt;.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
