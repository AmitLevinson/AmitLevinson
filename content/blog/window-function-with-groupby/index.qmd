---
title: Using window functions after a GROUP BY clause
author: Amit Grinson
date: '2023-06-15'
layout: single
slug: window-function-with-groupby
categories: [SQL]
tags: [SQL, window]
subtitle: 'Leveraging window functions following a group by caluse'
summary: 'A short overview of how to use window functions within a group by query. Going over 3 examples that help illustrate how to combine the two, as well as a better understanding of order of opertaions in SQL'
featured: yes
projects: []
format: hugo-md
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, eval = TRUE)
```


```{r}
library(odbc)
library(DBI)

sqlconn <- dbConnect(odbc(),
                      Driver = "SQL Server",
                      Server = "localhost\\SQLEXPRESS",
                      Database = "window_groupby")
```

```{r, eval = FALSE}
payments <- read.csv('content/blog/window-function-with-groupby/payments.csv', colClasses = c('numeric', 'character', 'Date', 'numeric'))

dbWriteTable(conn = sqlconn, 'payments', payments, field.types = c(user_id = 'INT', payment_id = 'VARCHAR(12)',payment_date = 'DATE', amount = 'INT' ), overwrite = TRUE)

users <- read.csv('content/blog/window-function-with-groupby/users.csv')

dbWriteTable(conn = sqlconn, 'users', users, field.types = c(user_id = 'INT', country = 'VARCHAR(2)'), overwrite = TRUE)
```

### Intro

I've been using both `GROUP BY` & Window functions for a while now, but for some reason I never thought of combining them. Maybe I tried once and used it wrong, got an error and felt intimidated since. 

Not long ago I encountered a Stackoverflow answer that used a window function & Group by in the same query, and more recently I saw [Ram Kedem] use it to solve a question from a set of questions he posted online. I really liked the use there mainly because I initially solved it in a more cumbersome way, so his solution seemed elegant and informative.

I've since started playing with the two more, so much that I also decided to go ahead and buy a book about it â€” ["T-SQL Window Functions: For data analysis and beyond"](https://www.amazon.com/gp/product/0135861446/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1).

This post is about some experimentation I played around, and what it taught me about order of operations in a SQL query. We'll start from a basic use case, move to a little more complex and end with what seems as an unintended use case. I'm not that well versed in the SQL infrastructure to state it's an unindetend use, but I have to admit it just doesn't seem right (though it is pretty cool how we'll use it!).

Alright then, let's begin!


### Classic order by



### Ranking for additional filters



### New variables based on grouped outputs


```{r echo = FALSE}
dbDisconnect(sqlconn)
```

